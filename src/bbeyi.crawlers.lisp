(in-package :bcrawlers)

;; this file will contain all the crawlers for different websites
;; each website we support will have a custom crawler.


(defparameter *jiji-types*
  '("cars"
    "buses"
    "heavy-equipment-machinery"
    "motorcycles-and-scooters"
    "trucks-commercial-agricultiral"
    "car-parts-and-accessories"
    "watercrafts-vehicle"
    "new-builds"
    "houses-apartments-for-rent"
    "houses-apartments-for-sale"
    "land-and-plots-for-rent"
    "land-and-plots-for-sale"
    "commercial-property-for-rent"
    "commercial-properties"
    "event-centers-and-venues"
    "mobile-phones"
    "cell-phones-tablets-accessories"
    "smart-watches"
    "tablets"
    "accessories-and-supplies-for-electronics"
    "computers-and-laptops"
    "tv-dvd-equipment"
    "audio-and-music-equipment"
    "computer-accessories"
    "computer-hardware"
    "computer-monitors"
    "headphones"
    "networking-products"
    "cameras-video-cameras-and-accessories"
    "printers-and-scanners"
    "security-and-surveillance"
    "computer-software"
    "videogames"
    "video-games-and-consoles"
    "furniture"
    "garden"
    "decor-accessories"
    "home-appliances"
    "kitchen-appliances"
    "kitchen-and-dining"
    "household-chemicals"
    "bath-body"
    "fragrance"
    "hair-beauty"
    "makeup"
    "sexual-wellness"
    "skin-care"
    "hookah-and-vaporizers"
    "tools-accessories"
    "supplements"
    "bags"
    "clothing"
    "accessories"
    "jewellery-and-watches"
    "shoes"
    "watches"
    "wedding-wear"
    "art-collectibles"
    "books-and-games"
    "camping-gear"
    "cds-and-dvds"
    "musical-instruments"
    "sports-bicycles-and-fitness"
    "accounting-and-finance-cvs"
    "advertising-and-marketing-cvs"
    "arts-and-entertainment-cvs"
    "childcare-and-babysitting-cvs"
    "clerical-and-administrative-cvs"
    "computing-and-it-cvs"
    "construction-and-skilled-trade-cvs"
    "consulting-and-strategy-cvs"
    "customer-service-cvs"
    "driver-cvs"
    "engineering-and-architecture-cvs"
    "farming-and-veterinary-cvs"
    "gardening-and-landscaping-cvs"
    "health-and-beauty-cvs"
    "healthcare-and-nursing-cvs"
    "hotel-cvs"
    "housekeeping-and-cleaning-cvs"
    "human-resources-cvs"
    "internship-cvs"
    "legal-cvs"
    "logistics-and-transportation-cvs"
    "management-cvs"
    "manual-labour-cvs"
    "manufacturing-cvs"
    "mining-industry-cvs"
    "office-cvs"
    "part-time-and-weekend-cvs"
    "quality-control-and-assurance-cvs"
    "quality-control-and-assurance-cvs"
    "research-and-survey-cvs"
    "restaurant-and-bar-cvs"
    "retail-cvs"
    "sales-and-telemarketing-cvs"
    "security-cvs"
    "sports-club-cvs"
    "teaching-cvs"
    "technology-cvs"
    "travel-and-tourism-cvs"
    "other-cvs"
    "automotive-services"
    "building-and-trades-services"
    "chauffeur-and-airport-transfer-services"
    "child-care-and-education-services"
    "classes-and-courses"
    "cleaning-services"
    "computer-and-it-services"
    "dj-and-entertainment-services"
    "fitness-and-personal-training-services"
    "health-and-beauty-services"
    "landscaping-and-gardening-services"
    "legal-services"
    "removals-and-storage-services"
    "manufacturing-services"
    "party-catering-and-event-services"
    "party-catering-and-event-services"
    "pet-services"
    "photography-and-video-services"
    "printing-services"
    "recruitment-services"
    "rental-services"
    "repair-services"
    "tax-and-financial-services"
    "travel-agents-and-tours"
    "wedding-venues-and-services"
    "other-services"
    "accounting-and-finance-jobs"
    "advertising-and-marketing-jobs"
    "arts-and-entertainment-jobs"
    "childcare-and-babysitting-jobs"
    "clerical-and-administrative-jobs"
    "computing-and-it-jobs"
    "construction-and-skilled-trade-jobs"
    "customer-service-jobs"
    "driver-jobs"
    "farming-and-veterinary-jobs"
    "health-and-beauty-jobs"
    "healthcare-and-nursing-jobs"
    "hotel-jobs"
    "housekeeping-and-cleaning-jobs"
    "internship-jobs"
    "logistics-and-transportation-jobs"
    "management-jobs"
    "manual-labour-jobs"
    "office-jobs"
    "part-time-and-weekend-jobs"
    "restaurant-and-bar-jobs"
    "retail-jobs"
    "sales-and-telemarketing-jobs"
    "security-jobs"
    "teaching-jobs"
    "technology-jobs"
    "other-jobs"
    "babies-and-kids-accessories"
    "baby-care"
    "childrens-clothing"
    "childrens-furniture"
    "childrens-gear-and-safety"
    "childrens-shoes"
    "maternity-and-pregnancy"
    "prams-and-strollers"
    "playground-equipment"
    "toys"
    "birds"
    "cats-and-kittens"
    "dogs-and-puppies"
    "fish"
    "pets-accessories"
    "other-animals"
    "reptiles"
    "farm-machinery-equipment"
    "feeds-supplements-seeds"
    "livestock-and-poultry"
    "meals-and-drinks"
    "industrial-ovens"
    "manufacturing-equipments"
    "manufacturing-materials-and-tools"
    "medical-equipment"
    "printing-equipment"
    "restaurant-and-catering-equipment"
    "safety-equipment"
    "salon-equipment"
    "stage-lighting-and-effects"
    "stationery"
    "store-equipments"
    "building-materials"
    "doors"
    "power-equipments"
    "power-tools"
    "hand-and-power-tools"
    "measuring-and-layout-tools"
    "plumbing-and-water-supply"
    "solar-energy-products"
    "windows"
    "other-repair-and-constraction-items")
  "this holds all main pages for the jiji webpage.")

(defun jiji-crawl (type &key (page 1))
  "crawl jiji pages, the data structure being worked is best seen live on the website but this will do
{adverts_list: {adverts: [{image_obj: {url: image-url}, price_title: price, region: region, short_description: desc, title: title, url: url, user_phone: user_phone}]}}

when the page is not found, return nil
when the page is found, save all items from the page, then go to the next page, repeat that until all pages are done.
"
  (multiple-value-bind (response response-code response-headers request-uri flexi-response response-bool status-text)
      (http-request (format nil "https://jiji.ug/api_web/v1/listing?slug=~a&init_page=true&page=~a&webp=true" type page))
    (declare (ignore response-code response-headers request-uri flexi-response response-bool status-text))
    (let* ((json-data (flexi-streams:octets-to-string response))
	   (data (jzon:parse json-data)))
      (unless (string= "{\"result\":\"err\",\"message\":\"Not Found\"}" (str:trim json-data))
	(loop for i across (hash-get data '("adverts_list" "adverts"))
	      do (save-jiji-item i))
	(jiji-crawl type :page (1+ page)))
      )))

(defun save-jiji-item (item)
  "item is a hash table, you need from it an image-url, price_title, region, product url, title"
  (let ((image-url (hash-get item '("image_obj" "url")))
	(condition (hash-get item '("attrs" 0 "value")))
	(price (gethash "price_title" item))
	(location (gethash "region_item_text" item))
	(description (gethash "short_description" item))
	(title (gethash "title" item))
	(url (gethash "url" item))
	(status (gethash "status" item))
	(id (format nil "jiji-~a" (gethash "guid" item))))
    (bbeyi::save-data id title description price location "jiji" image-url url status condition)))

(defparameter *jumia-types*
  '("mobile-phones"
    "tablets"
    "educational-tablets"
    "ipads"
    "tablet-accessories"
    "tablet-bags"
    "mobile-accessories"
    "smartphones"
    "smartphones"
    "televisions-recorders"
    "electronics-camera-photo"
    "electronics-audio"
    "home-audio-electronics"
    "electronic-accessories-supplies"
    "car-vehicle-electonics"
    "home-improvement-appliances"
    "small-appliances"
    "cooking-appliances"
    "bedding"
    "arts-crafts-sewing"
    "bath"
    "office-products"
    "home-kitchen-furniture"
    "home-kitchen-dining"
    "home-decor"
    "home-lighting"
    "home-kitchen-storage-organization"
    "power-hand-tools"
    "home-cleaning-supplies"
    "tools-home-improvement"
    "patio-lawn-garden"
    "womens-fashion"
    "fashion-sports-shop"
    "watches-sunglasses"
    "mens-fashion"
    "shoe-jewelry-watch-accessories"
    "fashion-weddings"
    "kids-fashion"
    "luggage-travel-gear"
    "food-cupboard-supplies"
    "soft-drinks"
    "grocery-milk-cream"
    "juice-drinks"
    "water"
    "baby-products"
    "household-supplies"
    "computer-accessories"
    "printers"
    "computer-data-storage"
    "softwares"
    "computer-accessories"
    "womens-make-up"
    "health-beauty-fragrances"
    "hair-care-d"
    "personal-care"
    "oral-care"
    "kiddies-accessories"
    "baby-feeding-products"
    "baby-toddler-toys"
    "baby-bathing-skin-care"
    "baby-health-care"
    "baby-diapering"
    "baby-gear-products"
    "pc-gaming"
    "xbox-one"
    "playstation-4"
    "groceries"
    "home-office-appliances"
    "computing"
    "electronics"
    "health-beauty"
    "sporting-goods"
    "jumia-global"
    "automobile"
    "musical-instruments"
    "toys-games"
    "pet-supplies"
    "industrial-scientific"
    "services"
    "miscellaneous"
    "livestock"
    "wholesale"
    "electronics"
    "patio-lawn-garden")
  "these are the product pages of jumia.ug")

(defun jumia-crawl (type &key (page 1))
  "just like jiji crawl, but this doesn't provide an api, so the data will just be extracted from the html."
  (multiple-value-bind (response response-code response-headers request-uri flexi-response response-bool status-text)
      (http-request (format nil "https://www.jumia.ug/~a/?page=~a#catalog-listing" type page))
    (declare (ignore response-code response-headers request-uri flexi-response response-bool status-text))
    (let* ((root (plump:parse response))
	  (all-articles (plump:get-elements-by-tag-name root "article"))
	  (articles (remove-if (lambda (article)
				 (string/= "prd _fb col c-prd" (plump:get-attribute article "class"))) all-articles)))
      (when articles
	(dolist (article articles)
	  (save-jumia-article-data article))
	(jumia-crawl type :page (1+ page))))))

(defun save-jumia-article-data (item)
  "remove all the neccessary data from the given item. note that given item is an element object from plump"
  (let* ((links (plump:children item))
	 (2nd-child (aref links 1))
	 (id (plump:get-attribute 2nd-child "data-ga4-item_id"))
	 (url (plump:get-attribute 2nd-child "href"))
	 (2nd-child-children (plump:children 2nd-child))
	 (image-url (plump:get-attribute (aref (plump:children (aref 2nd-child-children 0)) 0) "data-src"))
	 (details-children (plump:children (aref 2nd-child-children 1)))
	 (name (plump:text (aref details-children 0)))
	 (price (plump:text (aref details-children 1))))
    (bbeyi::save-data (format nil "jumia-~a" id) name nil price nil "jumia" image-url url nil nil)))
